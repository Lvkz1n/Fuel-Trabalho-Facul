Documentação do Código: Análise de Dados de Combustível:
Este documento fornece uma visão geral do código de um aplicativo de análise de dados de combustível usando Streamlit e Plotly. 
Este aplicativo permite aos usuários explorar os dados de veículos com base em vários filtros e visualizar essas informações de maneira interativa.

Importação das Bibliotecas: (python)
import streamlit as st
import pandas as pd
import plotly.express as px
As bibliotecas necessárias são importadas: streamlit para criar a interface web, pandas para manipulação de dados e plotly.express para visualização dos dados.

Configuração da Página:
st.set_page_config(layout="wide")
st.title("Análise de Dados de Combustível")
st.set_page_config(layout="wide"): Configura a página do Streamlit para usar o layout largo, permitindo mais espaço para os gráficos.
st.title("Análise de Dados de Combustível"): Define o título do aplicativo.

Carregamento dos Dados:
df = pd.read_csv("FUEL.csv")
Os dados do arquivo CSV FUEL.csv são carregados em um DataFrame do pandas. 

Filtros na Barra Lateral:
st.sidebar.header("Filtros")
anos = st.sidebar.multiselect(
    "Selecione o(s) ano(s):",
    options=df['ano'].unique(),
    default=df['ano'].unique()[:1]
)
st.sidebar.header("Filtros"): Adiciona um cabeçalho de filtros na barra lateral.
st.sidebar.multiselect(...): Cria um seletor múltiplo para os anos disponíveis nos dados, pré-selecionando o primeiro ano.

top_fabricante = df['fabricante'].value_counts().nlargest(1).index.tolist()
fabricantes = st.sidebar.multiselect(
    "Selecione o(s) fabricante(s):",
    options=df['fabricante'].unique(),
    default=top_fabricante
)
top_fabricante: Obtém o fabricante com o maior número de registros como valor padrão.
st.sidebar.multiselect(...): Cria um seletor múltiplo para os fabricantes, pré-selecionando o fabricante com mais registros.
Filtragem dos Dados

df_filtered = df[(df['ano'].isin(anos)) & (df['fabricante'].isin(fabricantes))]
Os dados são filtrados com base nos anos e fabricantes selecionados pelos usuários.

Layout da Página com Colunas
col1, col2 = st.columns(2)
col3, col4, col5 = st.columns(3)
O layout da página é dividido em colunas para organizar a disposição dos gráficos.

Gráficos:
Gráfico 1: Distribuição de Veículos por Modelo
fig1 = px.bar(df_filtered, x='modelo', title='Distribuição de Veículos por Ano', 
              labels={'modelo': 'Modelos', 'count': 'Versões'})
col1.plotly_chart(fig1, use_container_width=True)
Cria um gráfico de barras mostrando a distribuição de veículos por modelo.
col1.plotly_chart(fig1, use_container_width=True): (Exibe o gráfico na primeira coluna.)

Gráfico 2: Relação entre Deslocamento do Motor e Consumo na Cidade
fig2 = px.scatter(df_filtered, x='deslocamento_do_motor', y='consumo_cidade_mpg_ft1', color='fabricante', 
                 title='Relação entre Deslocamento do Motor, Consumo de Combustível na Cidade e Pontuação de Eficiência de Combustível',
                 labels={'deslocamento_do_motor': 'Deslocamento do Motor', 'consumo_cidade_mpg_ft1': 'Consumo de Combustível na Cidade (MPG)', 'fabricante': 'Fabricante'})
col2.plotly_chart(fig2, use_container_width=True)
Cria um gráfico de dispersão mostrando a relação entre o deslocamento do motor e o consumo na cidade.
col2.plotly_chart(fig2, use_container_width=True): (Exibe o gráfico na segunda coluna.)

Gráfico 3: Distribuição de Veículos por Classe e Fabricante
fig3 = px.bar(df_filtered, y='classe', color='fabricante', orientation='h',
              title='Distribuição de Veículos por Classe e Fabricante',
              labels={'classe': 'Classe', 'fabricante': 'Fabricante', 'count': 'Quantidade'})
col3.plotly_chart(fig3, use_container_width=True)
Cria um gráfico de barras horizontal mostrando a distribuição de veículos por classe e fabricante.
col3.plotly_chart(fig3, use_container_width=True): (Exibe o gráfico na terceira coluna.)

Gráfico 4: Tipos de Combustível
fig4 = px.pie(df_filtered, names='combustível_1', title='Tipos de Combustível', 
              labels={'combustível_1': 'Combustível'})
col4.plotly_chart(fig4, use_container_width=True)
Cria um gráfico de pizza mostrando a distribuição dos tipos de combustível.
col4.plotly_chart(fig4, use_container_width=True): (Exibe o gráfico na quarta coluna.)

Gráfico 5: Distribuição de Veículos por Classe e Turbo/Não Turbo
fig5 = px.bar(df_filtered, x='classe', color='turbo', barmode='stack',
              title='Distribuição de Veículos por Classe e Turbo/Não Turbo no Ano Selecionado',
              labels={'classe': 'Classe', 'turbo': 'Turbo', 'count': 'Quantidade'})
col5.plotly_chart(fig5, use_container_width=True)
Cria um gráfico de barras empilhadas mostrando a distribuição de veículos por classe e a presença de turbo.
col5.plotly_chart(fig5, use_container_width=True): (Exibe o gráfico na quinta coluna.)

Considerações Finais:
Este aplicativo permite aos usuários explorar os dados de veículos de uma forma interativa e visual. Os filtros na barra lateral oferecem 
flexibilidade para selecionar os anos e fabricantes de interesse, enquanto os gráficos exibem as informações filtradas de maneira clara e 
intuitiva.

Ao desenvolver visualizações de dados, é importante considerar a clareza das informações apresentadas, garantindo que os gráficos sejam 
facilmente compreensíveis e que as legendas e rótulos sejam adequados para o público-alvo. O uso de múltiplas visualizações pode ajudar a 
destacar diferentes aspectos dos dados e proporcionar uma análise mais completa.

Se houver necessidade de adicionar mais filtros ou gráficos, a modularidade do código atual permite fácil expansão e personalização 
conforme necessário.